diff --git a/data/keyboards/Generic.kl b/data/keyboards/Generic.kl
index f10ba96..7e395b9 100644
--- a/data/keyboards/Generic.kl
+++ b/data/keyboards/Generic.kl
@@ -119,9 +119,9 @@ key 96    NUMPAD_ENTER
 key 97    CTRL_RIGHT
 key 98    NUMPAD_DIVIDE
 key 99    SYSRQ
-key 100   ALT_RIGHT
+key 100   MENU
 # key 101 "KEY_LINEFEED"
-key 102   MOVE_HOME
+key 102   HOME
 key 103   DPAD_UP
 key 104   PAGE_UP
 key 105   DPAD_LEFT
@@ -247,7 +247,7 @@ key 224   BRIGHTNESS_DOWN
 key 225   BRIGHTNESS_UP
 key 226   HEADSETHOOK
 
-key 256   BUTTON_1
+key 256   HEADSETHOOK
 key 257   BUTTON_2
 key 258   BUTTON_3
 key 259   BUTTON_4
diff --git a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
index d97aec7..5a65a26 100644
--- a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
+++ b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
@@ -3013,6 +3013,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         // it handle it, because that gives us the correct 5 second
         // timeout.
         if (keyCode == KeyEvent.KEYCODE_HOME) {
+	if (down && repeatCount == 0) {
+              performHapticFeedbackLw(null, HapticFeedbackConstants.KEYBOARD_TAP, false);
+        }
 
             // If we have released the home key, and didn't do anything else
             // while it was pressed, then it is time to go home!
@@ -3121,6 +3124,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                     preloadRecentApps();
                 }
                 if (repeatCount == 0) {
+		performHapticFeedbackLw(null, HapticFeedbackConstants.KEYBOARD_TAP, false);
                     mMenuPressed = true;
                     if (mEnableShiftMenuBugReports && (metaState & chordBug) == chordBug) {
                         Intent intent = new Intent(Intent.ACTION_BUG_REPORT);
@@ -3304,6 +3308,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             }
             return -1;
         } else if (keyCode == KeyEvent.KEYCODE_BACK) {
+	if (down && repeatCount == 0) {
+              performHapticFeedbackLw(null, HapticFeedbackConstants.KEYBOARD_TAP, false);
+        }
             if (unpinActivity(true) || Settings.Secure.getInt(mContext.getContentResolver(),
                     Settings.Secure.KILL_APP_LONGPRESS_BACK, 0) == 1) {
                 if (down && repeatCount == 0) {
